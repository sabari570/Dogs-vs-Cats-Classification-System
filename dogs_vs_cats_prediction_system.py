# -*- coding: utf-8 -*-
"""Dogs vs Cats Prediction System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T-RKxlxWwMkjltydv70tpvMMsZRseRUv
"""

!pip install kaggle

# configuring the path of Kaggle.json file
! mkdir -p ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json

# Downloading the Dogs vs Cats dataset from kaggle
!kaggle competitions download -c dogs-vs-cats

!ls

# Extracting the zip file
from zipfile import ZipFile
dataset = '/content/dogs-vs-cats.zip'
with ZipFile(dataset, 'r') as zip:
  zip.extractall()
print('Dataset is extracted')

# Extracting the train.zip file
with ZipFile('/content/train.zip', 'r') as zip:
  zip.extractall()
print('Train.zip is extracted')

import os
#Conunting the number of files in train.zip
paths, dir, files = next(os.walk('/content/train'))
print(len(files))

file_names = os.listdir('/content/train/')
print(file_names)

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from sklearn.model_selection import train_test_split
from google.colab.patches import cv2_imshow

#Displaying the images of dogs and cats
img = mpimg.imread('/content/train/dog.6848.jpg')
plt.imshow(img)

img = mpimg.imread('/content/train/cat.11763.jpg')
plt.imshow(img)

# Counting the number of dog and cat images
file_names = os.listdir('/content/train')
dog_count = 0
cat_count = 0
for file in file_names:
  name = file[0:3]
  if name=='dog':
    dog_count+=1
  else:
    cat_count+=1
print('The number of dogs = ',dog_count)
print('The number of cats = ',cat_count)

# Creating a directory for resized images
os.mkdir('resized images')

original_folder = '/content/train/'
resized_folder = '/content/resized images/'

for i in range(2000):
  file_name = os.listdir(original_folder)[i]
  img_path = original_folder+file_name
  img = Image.open(img_path)
  img = img.resize((224, 224))
  img =img.convert('RGB')
  newImgPath = resized_folder+file_name
  img.save(newImgPath)

file_count = os.listdir('/content/resized images')
print(len(file_count))
print(file_count)

# Counting the number of dog and cat images
file_names = os.listdir('/content/resized images')
dog_count = 0
cat_count = 0
for file in file_names:
  name = file[0:3]
  if name=='dog':
    dog_count+=1
  else:
    cat_count+=1
print('The number of dogs = ',dog_count)
print('The number of cats = ',cat_count)

img = mpimg.imread('/content/resized images/cat.4006.jpg')
plt.imshow(img)

# creating the lables 
labels = []
dog_count = 0
cat_count = 0
file_names = os.listdir('/content/resized images')
for i in range(2000):
  category = file_names[i]
  name = category[0:3]
  if name == 'dog':
    labels.append(1)
    dog_count+=1

  else:
    labels.append(0)
    cat_count+=1
print('The number of dogs = ',dog_count)
print('The number of cats = ',cat_count)

# Converting reszied images into numpy array
import cv2
import glob

# Standard format for converting the resized images into numpy arrays
img_dir = '/content/resized images/'
img_extension = ['png', 'jpg']
files = []
[files.extend(glob.glob(img_dir+ '*.' + e)) for e in img_extension]
dog_cat_images = np.asarray([cv2.imread(file) for file in files])

print(dog_cat_images.shape)

X = dog_cat_images
Y = np.asarray(labels)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=1)

print(X.shape, X_train.shape, X_test.shape)

X_train_scaled = X_train/255
X_test_scaled = X_test/255

# Building the neural network
import tensorflow as tf
import tensorflow_hub as hub

# The below 3 blocks are mandatory for all deep learning projects prediction system
mobilenet_model = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4'
pretrained_model = hub.KerasLayer(mobilenet_model, input_shape=(224,224,3), trainable=False)

model = tf.keras.Sequential([
    pretrained_model,
    tf.keras.layers.Dense(2)
])
model.summary()

model.compile(
    optimizer = 'adam',
    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics = ['acc']
)

model.fit(X_train_scaled, Y_train, epochs=5)

loss_score, acc_score = model.evaluate(X_test_scaled, Y_test)
print('Loss score = ',loss_score)
print('Accuracy score = ',acc_score)

img_path = input("Enter the image path:")
img_path = cv2.imread(img_path)
cv2_imshow(img_path)
img_resized = cv2.resize(img_path, (224, 224))
img_scaled = img_resized/255
img_reshaped = np.reshape(img_scaled, [1, 224, 224, 3])
prediction = model.predict(img_reshaped)
print(prediction)
final_prediction = np.argmax(prediction)
print(final_prediction)
if final_prediction==1:
  print("The image represents a dog")
else:
  print("The image represents a cat")

import pickle

pickle.dump(model, open('trained_model.pkl', 'wb'))

